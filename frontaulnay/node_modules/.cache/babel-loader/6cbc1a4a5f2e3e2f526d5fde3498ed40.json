{"ast":null,"code":"var _jsxFileName = \"/Users/adlane/Documents/Cours/Cours-JS/js-adlane/aulnay-solidarite/aulnay-solidarite/frontaulnay/src/components/auth/AuthProvider.jsx\";\nimport React, { Component } from \"react\";\nimport { apiHandler } from \"../../api/handler\";\nimport AuthContext from \"./AuthContext\";\nconst handler = apiHandler();\nconst tokenName = \"authToken\"; // ATTENTION, ce fichier dépend de ./AuthContext, défini dans ce même dossier\n\nexport default class AuthProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: null,\n      isSignedIn: false\n    };\n\n    this.getLocalAuthToken = () => window.localStorage.getItem(tokenName);\n\n    this.getUserByToken = () => {\n      handler.get(\"/api/auth/get-user-by-token\").then(({\n        data\n      }) => {\n        this.setState({\n          currentUser: data,\n          isSignedIn: true\n        });\n      }).catch(apiErr => {\n        this.setState({\n          currentUser: null,\n          isSignedIn: false\n        });\n        console.error(apiErr.message);\n      });\n    };\n\n    this.setLocalAuthToken = token => window.localStorage.setItem(tokenName, token);\n\n    this.deleteLocalAuthToken = () => window.localStorage.removeItem(tokenName);\n\n    this.isAdmin = () => this.state.currentUser && this.state.currentUser === \"admin\";\n\n    this.setCurrentUser = (infos, clbk) => {\n      // on met à jour le state du AuthProvider avec les infos user mises à jour, mais :\n      this.setState({\n        currentUser: infos\n      }, () => {\n        // setState est ASYNC !!!\n        if (clbk) clbk(); // on utilise le callback du SetState AVANT d'exécuter le callback fourni par le component Signin, Signout ou autre !\n      });\n    };\n\n    this.signin = async (infos, clbk) => {\n      const {\n        email,\n        password\n      } = infos;\n\n      try {\n        const apiRes = await handler.post(\"/api/auth/signin\", {\n          email,\n          password\n        }); // si le signin se passe bien ...\n\n        this.setLocalAuthToken(apiRes.data.token); // écrit le token dans localStorage\n\n        this.setCurrentUser(apiRes.data.user, clbk);\n      } catch (err) {// console.error(err.response.data); // si erreur ...\n      }\n    };\n\n    this.signup = async (infos, clbk) => {\n      try {\n        await handler.post(\"/api/auth/signup\", infos);\n        clbk(); // so ok : appel du callback défini @ Signup\n      } catch (err) {\n        const method = err.response.status.toString().startsWith(\"4\") ? \"warn\" : \"error\"; // facultatif : outup un console.error OU console.warn en fonction du status retourné par le backend\n\n        console[method](err.response.data);\n      }\n    };\n\n    this.signout = clbk => {\n      this.deleteLocalAuthToken();\n      this.setCurrentUser(null);\n    };\n\n    this.isSignedIn = function () {\n      return Boolean(this.getLocalAuthToken());\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.currentUser && this.getLocalAuthToken()) {\n      this.getUserByToken();\n    }\n  }\n  /**\n   * Récupère le token d'authentification dans le localStorage du client\n   * @return {(String|null)} the auth token if found, null otherwise\n   */\n\n\n  render() {\n    //  Setup all the values/functions you want to expose to anybody reading\n    // from the AuthContext.\n    // écrire ici les méthodes et propriétés que vous souhaitez rendre accessible depuis les Consumers du Context d'authentification\n    const authValues = {\n      currentUser: this.state.currentUser,\n      setCurrentUser: this.setCurrentUser,\n      signin: this.signin,\n      signup: this.signup,\n      signout: this.signout,\n      isAdmin: this.isAdmin,\n      isSignedIn: this.isSignedIn()\n    };\n    return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n      value: authValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["/Users/adlane/Documents/Cours/Cours-JS/js-adlane/aulnay-solidarite/aulnay-solidarite/frontaulnay/src/components/auth/AuthProvider.jsx"],"names":["React","Component","apiHandler","AuthContext","handler","tokenName","AuthProvider","state","currentUser","isSignedIn","getLocalAuthToken","window","localStorage","getItem","getUserByToken","get","then","data","setState","catch","apiErr","console","error","message","setLocalAuthToken","token","setItem","deleteLocalAuthToken","removeItem","isAdmin","setCurrentUser","infos","clbk","signin","email","password","apiRes","post","user","err","signup","method","response","status","toString","startsWith","signout","Boolean","componentDidMount","render","authValues","props","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { apiHandler } from \"../../api/handler\";\nimport AuthContext from \"./AuthContext\";\n\nconst handler = apiHandler();\nconst tokenName = \"authToken\";\n\n// ATTENTION, ce fichier dépend de ./AuthContext, défini dans ce même dossier\n\nexport default class AuthProvider extends Component {\n  state = {\n    currentUser: null,\n    isSignedIn: false,\n  };\n\n  componentDidMount() {\n    if (!this.state.currentUser && this.getLocalAuthToken()) {\n      this.getUserByToken();\n    }\n  }\n\n  /**\n   * Récupère le token d'authentification dans le localStorage du client\n   * @return {(String|null)} the auth token if found, null otherwise\n   */\n  getLocalAuthToken = () => window.localStorage.getItem(tokenName);\n\n  getUserByToken = () => {\n    handler\n      .get(\"/api/auth/get-user-by-token\")\n      .then(({ data }) => {\n        this.setState({ currentUser: data, isSignedIn: true });\n      })\n      .catch((apiErr) => {\n        this.setState({ currentUser: null, isSignedIn: false });\n        console.error(apiErr.message);\n      });\n  };\n\n  /**\n   * Ecrit le token d'authentification dans le localStorage du client\n   * @param {String} token un jeton JWT généré côté server (/auth/index.js)\n   * @return {undefined}\n   */\n  setLocalAuthToken = (token) => window.localStorage.setItem(tokenName, token);\n\n  /**\n   * Supprime le token d'authentification dans le localStorage du client\n   * @return {undefined}\n   */\n  deleteLocalAuthToken = () => window.localStorage.removeItem(tokenName);\n\n\n  isAdmin = () => this.state.currentUser && this.state.currentUser === \"admin\";\n\n  /**\n   * Met à jour l'user courant dans le Contexte\n   */\n  setCurrentUser = (infos, clbk) => {\n    // on met à jour le state du AuthProvider avec les infos user mises à jour, mais :\n    this.setState({ currentUser: infos }, () => {\n      // setState est ASYNC !!!\n      if (clbk) clbk(); // on utilise le callback du SetState AVANT d'exécuter le callback fourni par le component Signin, Signout ou autre !\n    });\n  };\n\n  /**\n   * Tente de signin côté server via AJAX,\n   * créé le token d'authentification si succès\n   * @return {undefined}\n   */\n  signin = async (infos, clbk) => {\n    const { email, password } = infos;\n    try {\n      const apiRes = await handler.post(\"/api/auth/signin\", {\n        email,\n        password,\n      });\n      // si le signin se passe bien ...\n      this.setLocalAuthToken(apiRes.data.token); // écrit le token dans localStorage\n      this.setCurrentUser(apiRes.data.user, clbk);\n    } catch (err) {\n     // console.error(err.response.data); // si erreur ...\n    }\n  };\n\n  /**\n   * Supprime le token d'authentification et détruit la session côté backend\n   * @return {undefined}\n   */\n  signup = async (infos, clbk) => {\n    try {\n      await handler.post(\"/api/auth/signup\", infos);\n      clbk(); // so ok : appel du callback défini @ Signup\n    } catch (err) {\n      const method = err.response.status.toString().startsWith(\"4\")\n        ? \"warn\"\n        : \"error\"; // facultatif : outup un console.error OU console.warn en fonction du status retourné par le backend\n      console[method](err.response.data);\n    }\n  };\n\n  /**\n   * Supprime le token d'authentification et détruit la session côté backend\n   * @return {undefined}\n   */\n  signout = (clbk) => {\n    this.deleteLocalAuthToken();\n    this.setCurrentUser(null);\n  };\n\n  /**\n   * Vérifie si l'user courant est authentifié en vérifiant la présence ou non du token dans localStorage\n   * @return {Boolean} True if user is logged in, false otherwise\n   */\n  isSignedIn = function () {\n    return Boolean(this.getLocalAuthToken());\n  };\n\n  render() {\n    //  Setup all the values/functions you want to expose to anybody reading\n    // from the AuthContext.\n    // écrire ici les méthodes et propriétés que vous souhaitez rendre accessible depuis les Consumers du Context d'authentification\n    const authValues = {\n      currentUser: this.state.currentUser,\n      setCurrentUser: this.setCurrentUser,\n      signin: this.signin,\n      signup: this.signup,\n      signout: this.signout,\n      isAdmin: this.isAdmin,\n      isSignedIn: this.isSignedIn()\n    };\n\n    return (\n      <AuthContext.Provider value={authValues}>\n        {this.props.children}\n      </AuthContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}