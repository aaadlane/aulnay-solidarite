{"ast":null,"code":"import axios from \"axios\";\nexport class APIHandler {\n  constructor(APIPrefix) {\n    if (!process.env.REACT_APP_BACKEND_URL || !APIPrefix) throw new Error(\"fournir API prefix + URL de base pour effectuer des appels AJAX\");\n    this.instance = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL + APIPrefix || \"\"\n    });\n  }\n\n  createOne(payload) {\n    return this.instance.post(\"/\", payload);\n  }\n\n  getAll() {\n    return this.instance.get(\"/\");\n  }\n\n  getById(id) {\n    return this.instance.get(\"/\" + id);\n  }\n\n  deleteOne(id) {\n    return this.instance.delete(\"/\" + id);\n  }\n\n  updateOne(id, stateToUpdate) {\n    return this.instance.patch(\"/\" + id, stateToUpdate);\n  }\n\n}\nconst tokenName = \"authToken\";\nexport function apiHandler() {\n  // utile pour normaliser la connection à l'API back\n  const backendURL = process.env.REACT_APP_BACKEND_URL;\n  if (!backendURL) throw new Error(\"fournir URL de base pour effectuer appel AJAX\");\n  const instance = axios.create({\n    // les requêtes effectuées avec axios prennent par défaut l'url du backend\n    baseURL: backendURL\n  });\n  instance.interceptors.request.use(config => {\n    // Ce code est exécuté avant l'envoi de chaque requête axios\n    // important : on configure le type des entêtes en JSON\n    config.headers[\"Content-Type\"] = \"application/json\"; // on essaie de récupérer le token d'auth dans le local storage\n    // READ THE DOC : https://jwt.io/\n    // et aussi ... https://developer.mozilla.org/fr/docs/Web/API/Window/localStorage\n\n    const localAuthToken = window.localStorage.getItem(tokenName); // console.log(\"auth token ? >>> \", localAuthToken);\n    // si le token JWT existe, on l'envoie dans l'entête (header) de chaque requête HTTP partant vers le backend\n    // READ THE DOC : https://developer.mozilla.org/fr/docs/Web/HTTP/Headers\n\n    if (localAuthToken) config.headers[\"x-authenticate\"] = localAuthToken; // la clé de l'entête\n    // si le token est absent, le serveur rejettera la requête entrante sur les routes protégées ...\n\n    return config;\n  }, error => {\n    // Do something with request error...\n    return Promise.reject(error);\n  });\n  return instance;\n}","map":{"version":3,"sources":["/Users/adlane/Documents/Cours/Cours-JS/js-adlane/aulnay-solidarite/aulnay-solidarite/frontaulnay/src/api/handler.js"],"names":["axios","APIHandler","constructor","APIPrefix","process","env","REACT_APP_BACKEND_URL","Error","instance","create","baseURL","createOne","payload","post","getAll","get","getById","id","deleteOne","delete","updateOne","stateToUpdate","patch","tokenName","apiHandler","backendURL","interceptors","request","use","config","headers","localAuthToken","window","localStorage","getItem","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,QAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,qBAAb,IAAsC,CAACH,SAA3C,EACE,MAAM,IAAII,KAAJ,CACJ,iEADI,CAAN;AAIF,SAAKC,QAAL,GAAgBR,KAAK,CAACS,MAAN,CAAa;AAC3BC,MAAAA,OAAO,EAAEN,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAoCH,SAApC,IAAiD;AAD/B,KAAb,CAAhB;AAGD;;AAEDQ,EAAAA,SAAS,CAACC,OAAD,EAAU;AACjB,WAAO,KAAKJ,QAAL,CAAcK,IAAd,CAAmB,GAAnB,EAAwBD,OAAxB,CAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKN,QAAL,CAAcO,GAAd,CAAkB,GAAlB,CAAP;AACD;;AAEDC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,WAAO,KAAKT,QAAL,CAAcO,GAAd,CAAkB,MAAME,EAAxB,CAAP;AACD;;AAEDC,EAAAA,SAAS,CAACD,EAAD,EAAK;AACZ,WAAO,KAAKT,QAAL,CAAcW,MAAd,CAAqB,MAAMF,EAA3B,CAAP;AACD;;AACDG,EAAAA,SAAS,CAACH,EAAD,EAAKI,aAAL,EAAmB;AAC1B,WAAO,KAAKb,QAAL,CAAcc,KAAd,CAAoB,MAAML,EAA1B,EAA8BI,aAA9B,CAAP;AACD;;AA7BqB;AAgCxB,MAAME,SAAS,GAAG,WAAlB;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B;AACA,QAAMC,UAAU,GAAGrB,OAAO,CAACC,GAAR,CAAYC,qBAA/B;AACA,MAAI,CAACmB,UAAL,EACE,MAAM,IAAIlB,KAAJ,CAAU,+CAAV,CAAN;AAEF,QAAMC,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAa;AAC5B;AACAC,IAAAA,OAAO,EAAEe;AAFmB,GAAb,CAAjB;AAKAjB,EAAAA,QAAQ,CAACkB,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACGC,MAAD,IAAY;AACV;AACA;AACAA,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,kBAAjC,CAHU,CAKV;AACA;AACA;;AACA,UAAMC,cAAc,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BX,SAA5B,CAAvB,CARU,CASV;AAEA;AACA;;AACA,QAAIQ,cAAJ,EAAoBF,MAAM,CAACC,OAAP,CAAe,gBAAf,IAAmCC,cAAnC,CAbV,CAa6D;AACvE;;AACA,WAAOF,MAAP;AACD,GAjBH,EAkBGM,KAAD,IAAW;AACT;AACA,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GArBH;AAwBA,SAAO3B,QAAP;AACD","sourcesContent":["import axios from \"axios\";\n\nexport class APIHandler {\n  constructor(APIPrefix) {\n    if (!process.env.REACT_APP_BACKEND_URL || !APIPrefix)\n      throw new Error(\n        \"fournir API prefix + URL de base pour effectuer des appels AJAX\"\n      );\n\n    this.instance = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL + APIPrefix || \"\",\n    });\n  }\n\n  createOne(payload) {\n    return this.instance.post(\"/\", payload);\n  }\n\n  getAll() {\n    return this.instance.get(\"/\"); \n  }\n\n  getById(id) {\n    return this.instance.get(\"/\" + id);\n  }\n\n  deleteOne(id) {\n    return this.instance.delete(\"/\" + id);\n  }\n  updateOne(id, stateToUpdate){\n    return this.instance.patch(\"/\" + id, stateToUpdate)\n  }\n}\n\nconst tokenName = \"authToken\";\n\nexport function apiHandler() {\n  // utile pour normaliser la connection à l'API back\n  const backendURL = process.env.REACT_APP_BACKEND_URL;\n  if (!backendURL)\n    throw new Error(\"fournir URL de base pour effectuer appel AJAX\");\n\n  const instance = axios.create({\n    // les requêtes effectuées avec axios prennent par défaut l'url du backend\n    baseURL: backendURL,\n  });\n\n  instance.interceptors.request.use(\n    (config) => {\n      // Ce code est exécuté avant l'envoi de chaque requête axios\n      // important : on configure le type des entêtes en JSON\n      config.headers[\"Content-Type\"] = \"application/json\";\n\n      // on essaie de récupérer le token d'auth dans le local storage\n      // READ THE DOC : https://jwt.io/\n      // et aussi ... https://developer.mozilla.org/fr/docs/Web/API/Window/localStorage\n      const localAuthToken = window.localStorage.getItem(tokenName);\n      // console.log(\"auth token ? >>> \", localAuthToken);\n\n      // si le token JWT existe, on l'envoie dans l'entête (header) de chaque requête HTTP partant vers le backend\n      // READ THE DOC : https://developer.mozilla.org/fr/docs/Web/HTTP/Headers\n      if (localAuthToken) config.headers[\"x-authenticate\"] = localAuthToken; // la clé de l'entête\n      // si le token est absent, le serveur rejettera la requête entrante sur les routes protégées ...\n      return config;\n    },\n    (error) => {\n      // Do something with request error...\n      return Promise.reject(error);\n    }\n  );\n\n  return instance;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}